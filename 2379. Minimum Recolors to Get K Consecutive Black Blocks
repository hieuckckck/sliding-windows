C++ using Sliding Window || Very Simple and Straight Forward Sol || O(n) Time Complexity
sidver-18
5
Mar 22, 2023
Approach
While creating the window of size K just keep count of White blocks.
On reaching the window size just compare the current count and store it in a variable.
Everytime whenever you reach the window size and after comparing the minimum count just increase the left side by 1 and decrease the count by 1 if the block at left was a white block.

Complexity
Time complexity: O(n)
Space complexity: O(1)
Code
class Solution {
public:
    int minimumRecolors(string blocks, int k) {
        int left = 0;
        int right = 0;
        int ans = INT_MAX;
        int count = 0;
        while(right < blocks.size()){
            if(blocks[right] == 'W'){
                count++;
            }
            if(right - left + 1 == k){
                ans = min(count, ans);
                if(blocks[left] == 'W'){
                    count--;
                }
                left++;
            }
            right++;
        }
        return ans;
    }
};

c3:
Approach
Sliding Window Technique

Complexity
Time complexity: O(n)
Space complexity: O(1)
Code
class Solution {
public:
    int minimumRecolors(string blocks, int k) {
        int res=0,count=0;
        for(int i=0;i<k;i++)
        {
            if(blocks[i]=='B')
            count++;
        }
        res = max(res,count);
        for(int i=k;i<blocks.length();i++)
        {
            if(blocks[i]=='B'&&blocks[i-k]=='W')
            count++;
            if(blocks[i]=='W'&&blocks[i-k]=='B')
            count--;
            res = max(res,count);
        }
        return k-res;
    }
};
