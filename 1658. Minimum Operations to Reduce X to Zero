class Solution {
public:
    int minOperations(vector<int>& nums, int x) 
    {
         int totalsum = 0;
         for(int i=0;i<nums.size();i++)
         {
             totalsum = totalsum + nums[i];
         }
         if(x > totalsum) return -1;
         
         if(x == 0) 
         return 0;  //x is already 0 we dont need to do any operation

         //1. we can take all the elements form the left
         //2. we can take all the elements from the right
         //3. we can take some elements from the left and some from the right
         //4. we can take no elements from the left and no elements from the right

         //1.checking min operation from the left of the array
         //if we take all the elemnets from the left of the array
         int leftonly = INT_MAX;
         int count = 0;
         int temp = x;
         for(int i=0;i<nums.size();i++)
         {
             int ele = nums[i];
             temp = temp - ele;
             count++;

             if(temp == 0)
             {
                 leftonly = min(leftonly,count);
                 break;
             }
             else if(temp < 0)
             {
                 break;
             }
         }

         //2. checking min operations form the right of the array
         //if we take all the elements from the right of the array
         int rightonly = INT_MAX;
         count = 0;
         temp=x;
         for(int i=nums.size()-1;i>=0;i--)
         {
             int ele = nums[i];
             temp = temp - ele;
             count++;

             if(temp == 0)
             {
                 rightonly = min(rightonly,count);
                 break;
             }
             else if(temp < 0)
             {
                 break;
             }
         }
         
         //3. taking some elements from the left and form the right
         //making the suffix array
         //the map will hold at what nearest index from the end we are getting the req sum
         unordered_map<int,int>mp; // <sum,int>
         int suffixsum = 0;
         mp[suffixsum] = nums.size();
         for(int i=nums.size()-1;i>=0;i--)
         {
             int ele = nums[i];
             suffixsum = suffixsum + ele;
             
             if(mp.find(suffixsum) != mp.end())
             {
                 continue;
             }
             else
             {
                 mp[suffixsum] = i;
             }
         }
         int leftright = INT_MAX;
         count = 0;
         temp = x;
         int sum = 0;
         for(int i=0;i<nums.size();i++)
         {
             int ele = nums[i];
             sum = sum + ele;

             if(mp.find(temp-sum) != mp.end())
             {
                 //cout<<"sum = "<<sum<<" "<<"temp-sum = "<<temp-sum<<" "<<"idx="<<mp[temp-sum]<<endl;

                 int leftsize = i - 0 + 1;
                 int rightsize = nums.size()-1 - mp[temp-sum]+1;
                 count = leftsize + rightsize;
                 leftright = min(leftright,count);

                 //cout<<"leftsize ="<<leftsize<<" "<<"rightsize = "<<rightsize<<endl;
             }
         }
         //<<leftonly<<" "<<rightonly<<" "<<leftright<<endl;
         int ans = min(leftonly,min(leftright,rightonly));
         if(ans == INT_MAX) return -1;

         return ans;
    }
};

c2:

so , the problem is saying that we can remove either leftmost or rightmost element and we have to remove them in such a way that
1.remove minimum number of elements and

sum of all removed element is X
Now main point is that if successfully remove elements such that sum of removed elements is X , then

sum of remaining array elements will be (sum-X)
remaing array will be subarray of original array.
image.

So , now our task is find subaarray whose sum is (sum - X) and its length is maximum ( because we want to remove minimum number of elements , so we will have to maximise remianing element ) .

time - O(N)
space - O(1)

int minOperations(vector<int>& v, int x) 
    {
        int i,len=0,sum1=0,sum2=0;
        for(i=0;i<v.size();i++)
            sum2+=v[i];                  // calculating sum of whole array 
			
        sum2-=x;   //  this is sum of remiaing elements . after removing X 
		
        if(sum2==0)        // sum of array is equal to X . means we'll have to remove all elements
            return v.size();
			
// sliding window technique 
// i points to begining of subarray and j points to end of subarray 

		// sum2 is desired sum while sum1 is current sum
        int j;i=0;
        for(j=0;j<v.size();j++)
        {
            sum1+=v[j];
			
            while(i<v.size()&&sum1>sum) // if sum of current subaaray is greater than desired sum
                sum1-=v[i++];
				
            if(sum1==sum2)  // if sum of current subarray is equal to desired sum then update length
                len=max(len,j-i+1); // we want subarray  with maximum length 
        }
        if(!len)        // No subarray found with desired sum .
            return -1;
        return v.size()-len;
    }
    
    c3:
    
    Approach 1: Hash map, prefix sum, two sum
- Idea: + create hash map satisfy mapLeft[prefix sum] = i, i is last index in prefix sum
+ brute force from last index in array to first index and create suffix sum, find i satisfy mapLeft[x - suffix sum] > 0
=> that's mean prefix sum + suffix sum = x, and min operation = min (min operation, size(prefix sum) + size(suffix sum) );
+ Time: O(n)
+ Space: O(n)

class Solution {
public:
	int minOperations(vector<int>& nums, int x) {
		unordered_map<int, int> mapLeft;
		int n = nums.size();
		int ans = INT_MAX;

		for(int i = 0, prefixSum = 0; i < n; i++) {
			prefixSum += nums[i];
			mapLeft[prefixSum] = i + 1;
			if (prefixSum == x)
				ans = min(ans, i + 1);
		}

		for(int i = n - 1, suffixSum = 0; i >= 0; i--) {
			suffixSum += nums[i];
			if(suffixSum == x)
				ans = min(ans, n - i);
			if(mapLeft[x - suffixSum] > 0 && i + 1 > mapLeft[x - suffixSum]) // if i + 1 <= mapLeft => both prefix sum and suffix sum have same elements
				ans = min(ans, n - i + mapLeft[x - suffixSum]); // n - i is size suffix sum, mapLeft[x - suffixSum] is size prefix sum
		}

		return ans == INT_MAX ? -1 : ans;
	}
};
Approach 2: longest subarray have sum == sum(nums) - x
- Idea: If u find longest subarray have sum == sum(nums) - x
=> minimun operation = nums.size() - size(longest subarray)
imageTime: O(n)
Space: O(1)

class Solution {
public:
	int minOperations(vector<int>& nums, int x) {
		int sum = accumulate(nums.begin(), nums.end(), 0);

		if(sum < x) return -1;
		if(sum == x) return nums.size();

		int target = sum - x, currentSum = 0, start = 0, maxSize = 0;
		for(int i = 0; i < nums.size(); i++) {
			currentSum += nums[i];

			while(currentSum > target)
				currentSum -= nums[start++];

			if(currentSum == target)
				maxSize = max(maxSize, i - start + 1);
		}

		return (maxSize == 0) ? - 1 : nums.size() - maxSize;
	}
};
