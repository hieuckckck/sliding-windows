Easy C++ approach|| O(N)|| Sliding Window
Bhaskar_Agrawal
136
Jan 19, 2023
Intuition
The whole Intuition I get is itself from the question, that is, (i-k) and (i+k). with this i decided to make a window of (2*k)+1 size.

Approach
In this problem, we have to check whether k size elements are present to left and right of index i. if yes, then proceed further else give -1. For this, declare vector of size n and initialize it with -1.

Now if k is 0, return the nums vector as it is. Now traverse whole vector and starts computing sum of window size of 2k+1. and calculate the average when window sum is computed. minus the index j value from sum and add next i value to keep window size intact.

Store the avg at i-k index in the vector declared.

Complexity
Time complexity:
0(N)

Space complexity:
O(N) because we make an extra vector of size n.

Code
class Solution {
public:
    vector<int> getAverages(vector<int>& nums, int k) {
        int n= nums.size();
        vector<int> v(n,-1);
        int temp= (2*k) +1;

        if(n<temp)  // base case 1;
        return v;

        if(k==0)   // base case 2;
        return nums;
        long long int j=0, sum=0, avg=0;
        for(int i=0; i< n; i++)
        {
            sum = sum + nums[i];
            if(i-j+1==temp)
            {
                avg= sum/temp;
                // v.push_back(avg);
                v[i-k]= avg;
                sum= sum- nums[j];
                j++;
            }
        }
        return v;
    }
};
c2:

// OJ: https://leetcode.com/problems/k-radius-subarray-averages/
// Author: github.com/lzl124631x
// Time: O(N)
// Space: O(N)
class Solution {
public:
    vector<int> getAverages(vector<int>& A, int k) {
        int N = A.size(), len = 2 * k + 1;
        vector<int> ans(N, -1);
        if (N < len) return ans; // If the array is too short to cover a window, return all -1s
        vector<long> sum(N + 1);
        for (int i = 0; i < N; ++i) sum[i + 1] = sum[i] + A[i];
        for (int i = k; i + k < N; ++i) ans[i] = (sum[i + k + 1] - sum[i - k]) / len;
        return ans;
    }
};
c3:
class Solution {
public:
    vector<int> getAverages(vector<int>& nums, int k) {
        vector<int>ans(nums.size(),-1);
        vector<long long>prefix(nums.size());
        prefix[0]=nums[0];
        for(int i=1;i<nums.size();i++){
            prefix[i]+=(prefix[i-1]+nums[i]);
        }
        for(int i=k;i+k<nums.size();i++){
            if(i-k>0){
                ans[i]=((prefix[i+k]-prefix[i-k-1])/(2*k+1));
            }else{
                ans[i]=(prefix[i+k]/(2*k+1));
            }
        }
        return ans;
        
    }
};
