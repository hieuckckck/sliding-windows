class Solution {
public:
    int minimumCardPickup(vector<int>& cards) {
        int i = 0, j = 0, n = cards.size(),ans = INT_MAX;
        vector<int> v(1e6+1);
        while(i<n){
            v[cards[i]]++;
            if(v[cards[i]]==2){
                while(v[cards[i]]==2){
                    v[cards[j++]]--;
                }
                // cout<<i<<" "<<j<<endl;
                ans = min(ans,i-j+2);
            }
            i++;
        }
        // cout<<endl;
        return (ans==INT_MAX?-1:ans);
    }
};
c2:
Easy Simple C++ Solution || Unordered_map ✔✔
akanksha984
100 Days Badge 2022
683
Jan 07, 2023
Complexity
Time complexity: O(n)O(n)O(n)
Space complexity: O(n)O(n)O(n)
Code
class Solution {
public:
    int minimumCardPickup(vector<int>& cards) {
        int ans= INT_MAX;
        unordered_map<int,int> mp;
        for (int i=0; i<cards.size(); i++){
            if (mp.find(cards[i]) != mp.end()){
                ans= min(ans,i-mp[cards[i]]+1);
            }
            mp[cards[i]]= i;
        }
        if (ans==INT_MAX)return -1;
        return ans;
    }
};
