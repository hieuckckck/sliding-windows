Approach
This implementation first builds a set of missing characters that need to be present in the nice substring. It then iterates over the string s, checking if each character is missing. If a missing character is found, it recursively searches for the longest nice substring in the substrings to the left and right of the missing character. Finally, it returns the longer of the two substrings found or the original string if it is already nice.

Complexity
Time complexity: O(n^2)
The time complexity of this code is O(n^2), where n is the length of the input string s. This is because the code uses two recursive calls to longestNiceSubstring on substrings of s, which can result in the function being called on substrings of s of size up to n-1.

Space complexity: O(n)
The space complexity of this code is O(n), due to the use of an unordered set missing to store the set of characters missing from the input string s. The worst-case size of missing is the number of distinct characters in s, which is at most n.

Code
class Solution {
public:
    string longestNiceSubstring(string s) {
        unordered_set<char> missing;
        for (char c : s) {
            if (islower(c)) missing.insert(toupper(c));
            else missing.insert(tolower(c));
        }
        for (int i = 0; i < s.size(); i++) {
            if (missing.count(s[i])) {
                continue;
            }
            string s1 = longestNiceSubstring(s.substr(0, i));
            string s2 = longestNiceSubstring(s.substr(i + 1));
            return s1.size() >= s2.size() ? s1 : s2;
        }
        return s;
    }
};

c2:

class Solution {
public:
    string longestNiceSubstring(string s) 
    {
     
        return fun(s);
    }
    string fun(string str)
    {
	
        if(str.length()<=1)
        return "";

        unordered_set<char>st;
        st.insert(str.begin(),str.end());

        for(int i=0;i<str.length();i++)
        {
            char ch=str[i];

            char temp1=toupper(ch);
            char temp2=tolower(ch);

            if(st.find(temp1)==st.end() or st.find(temp2)==st.end())
            {
                //the counter part of the ith char is missing can never be in the substring
                string left = fun(str.substr(0,i));
                string right = fun(str.substr(i+1,str.length()));

                if(left.length()==right.length())
                {
                    return left;
                }
                else if(left.length()>right.length())
                {
                    return left;
                }
                else
                {
                    return right;
                }
            }
        }
        return str;
   }
};
